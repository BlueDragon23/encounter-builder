/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/encounters": {
    get: operations["getEncounters"];
    post: operations["createEncounter"];
  };
  "/monsters": {
    get: operations["getMonsters"];
  };
  "/monsters/{id}": {
    get: operations["getMonster"];
  };
  "/encounters/{name}": {
    get: operations["getEncounter"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AggregateReferenceTemplateCreatureLong: {
      /** Format: int64 */
      id?: number;
    };
    Encounter: {
      /** Format: int64 */
      id?: number;
      name?: string;
      description?: string;
      creatures?: components["schemas"]["EncounterCreatureRef"][];
    };
    EncounterCreatureRef: {
      /** Format: int64 */
      id?: number;
      templateCreature?: components["schemas"]["AggregateReferenceTemplateCreatureLong"];
      /** Format: int32 */
      count?: number;
    };
    Pageable: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      size?: number;
      sort?: string[];
    };
    PageTemplateCreatureSummary: {
      /** Format: int32 */
      totalPages?: number;
      /** Format: int64 */
      totalElements?: number;
      pageable?: components["schemas"]["PageableObject"];
      /** Format: int32 */
      numberOfElements?: number;
      /** Format: int32 */
      size?: number;
      content?: components["schemas"]["TemplateCreatureSummary"][];
      /** Format: int32 */
      number?: number;
      sort?: components["schemas"]["SortObject"][];
      first?: boolean;
      last?: boolean;
      empty?: boolean;
    };
    PageableObject: {
      /** Format: int32 */
      pageNumber?: number;
      paged?: boolean;
      unpaged?: boolean;
      /** Format: int32 */
      pageSize?: number;
      /** Format: int64 */
      offset?: number;
      sort?: components["schemas"]["SortObject"][];
    };
    SortObject: {
      direction?: string;
      nullHandling?: string;
      ascending?: boolean;
      property?: string;
      ignoreCase?: boolean;
    };
    TemplateCreatureSummary: {
      /** Format: int64 */
      id?: number;
      name?: string;
      description?: string;
      /** @enum {string} */
      creatureSize?: "TINY" | "SMALL" | "MEDIUM" | "LARGE" | "HUGE" | "GARGANTUAN";
      type?: string;
      alignment?: string;
      /** Format: int32 */
      armorClass?: number;
      /** Format: float */
      challengeRating?: number;
      /** Format: int32 */
      proficiencyBonus?: number;
      /** Format: int32 */
      hitpoints?: number;
    };
    AbilityScores: {
      /** Format: int32 */
      strength?: number;
      /** Format: int32 */
      dexterity?: number;
      /** Format: int32 */
      constitution?: number;
      /** Format: int32 */
      intelligence?: number;
      /** Format: int32 */
      wisdom?: number;
      /** Format: int32 */
      charisma?: number;
    };
    Attack: {
      /** Format: int64 */
      id?: number;
      name?: string;
      description?: string;
      damage?: components["schemas"]["Damage"][];
      range?: string;
      /** @enum {string} */
      attackType?: "ACTION" | "REACTION" | "LEGENDARY";
    };
    Damage: {
      /** Format: int64 */
      id?: number;
      /** @enum {string} */
      die?: "D3" | "D4" | "D6" | "D8" | "D10" | "D12" | "D20" | "D100";
      /** Format: int32 */
      count?: number;
      /** @enum {string} */
      damageType?: "SLASHING" | "PIERCING" | "BLUDGEONING" | "POISON" | "ACID" | "FIRE" | "COLD" | "RADIANT" | "NECROTIC" | "LIGHTNING" | "THUNDER" | "FORCE" | "PYSCHIC";
    };
    Dice: {
      /** @enum {string} */
      die?: "D3" | "D4" | "D6" | "D8" | "D10" | "D12" | "D20" | "D100";
      /** Format: int32 */
      count?: number;
    };
    SpecialAbility: {
      name?: string;
      description?: string;
      /** Format: int32 */
      attackBonus?: number;
    };
    Speed: {
      /** Format: int32 */
      walk?: number;
      /** Format: int32 */
      burrow?: number;
      /** Format: int32 */
      climb?: number;
      /** Format: int32 */
      fly?: number;
      /** Format: int32 */
      swim?: number;
    };
    TemplateCreature: {
      /** Format: int64 */
      id?: number;
      name?: string;
      description?: string;
      /** @enum {string} */
      creatureSize?: "TINY" | "SMALL" | "MEDIUM" | "LARGE" | "HUGE" | "GARGANTUAN";
      type?: string;
      alignment?: string;
      /** Format: int32 */
      armorClass?: number;
      /** Format: float */
      challengeRating?: number;
      /** Format: int32 */
      proficiencyBonus?: number;
      /** Format: int32 */
      hitpoints?: number;
      hitDice?: components["schemas"]["Dice"];
      speed?: components["schemas"]["Speed"];
      abilityScores?: components["schemas"]["AbilityScores"];
      attacks?: components["schemas"]["Attack"][];
      specialAbilities?: components["schemas"]["SpecialAbility"][];
      savingThrows?: ("STRENGTH" | "DEXTERITY" | "CONSTITUTION" | "INTELLIGENCE" | "WISDOM" | "CHARISMA")[];
    };
    EncounterSummary: {
      /** Format: int64 */
      id?: number;
      name?: string;
      description?: string;
    };
    PageEncounterSummary: {
      /** Format: int32 */
      totalPages?: number;
      /** Format: int64 */
      totalElements?: number;
      pageable?: components["schemas"]["PageableObject"];
      /** Format: int32 */
      numberOfElements?: number;
      /** Format: int32 */
      size?: number;
      content?: components["schemas"]["EncounterSummary"][];
      /** Format: int32 */
      number?: number;
      sort?: components["schemas"]["SortObject"][];
      first?: boolean;
      last?: boolean;
      empty?: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  getEncounters: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PageEncounterSummary"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createEncounter: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Encounter"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Encounter"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getMonsters: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
        name?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PageTemplateCreatureSummary"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getMonster: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["TemplateCreature"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getEncounter: {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Encounter"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "*/*": string;
        };
      };
    };
  };
}
